namespace kvadratmatrix
{
class MatrixKvadrat
{
int n; double Ch;
double[,] matrix;
int r = 0; 
public double this[int i, int j]
{
get { return matrix[i, j]; }
set { matrix[i, j] = value; }
}
public MatrixKvadrat(int n)
{
this.n = n;
this.matrix = new double[n, n];
}
public void CreateMatrix2()
{

for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
Console.Write("Введите элемент [" + i.ToString() + ";" + j.ToString() + "]" + "\t");
matrix[i, j] = Convert.ToDouble(Console.ReadLine());
}
}

}
public void CreateMatrix1()
{
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
Console.Write("Введите элемент [" + i.ToString() + ";" + j.ToString() + "]" + "\t");
matrix[i, j] = Convert.ToDouble(Console.ReadLine());
}
}
}

public void PrintMatrix2()
{
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
Console.Write(matrix[i, j] + "\t");
}
Console.WriteLine();
}
}
public void PrintMatrix1()
{
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
Console.Write(matrix[i, j] + "\t");
}
Console.WriteLine();
}
}
public void Diagonal()
{
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
if ((matrix[i, j] == 0) && (matrix[i, i] != 0))
r = r + 1;

}
}
if (r == n)
{
Console.Write("ДА, эта матрица диагональная" + "\t");
Console.Write("............................." + "\t");
}
else Console.Write("НЕТ, эта матрица не диагональная" + "\t");


}
public void Nulle()
{
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
if (matrix[i, j] == 0)
r = r + 1;

}
}
if (r == n * n)
{
Console.Write("ДА, эта матрица нулевая" + "\t");
}
else Console.Write("НЕТ, эта матрица не нулевая" + "\t");
}
public static MatrixKvadrat operator +(MatrixKvadrat A, MatrixKvadrat B)
{
MatrixKvadrat C = new MatrixKvadrat( A.n);
for (int i = 0; i < A.n; i++)
{
for (int j = 0; j < A.n; j++)
{
C[i,j] = A[i,j] + B[i,j];
}
}
return C;

}
public void PrintMatrix3()
{
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
Console.Write(matrix[i, j] + "\t");
}
Console.WriteLine();
}
}
public static MatrixKvadrat operator -(MatrixKvadrat A, MatrixKvadrat B)
{
MatrixKvadrat R = new MatrixKvadrat(A.n);
for (int i = 0; i < A.n; i++)
{
for (int j = 0; j < A.n; j++)
{
R[i, j] = A[i, j] - B[i, j];
}
}
return R;

}

public void PrintMatrix4()
{
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
Console.Write(matrix[i, j] + "\t");
}
Console.WriteLine();
}
}

public static MatrixKvadrat operator *(MatrixKvadrat A, MatrixKvadrat B)
{
MatrixKvadrat r = new MatrixKvadrat(A.n);
for (int i = 0; i < A.n; i++)
{
for (int j = 0; j < A.n; j++)
{
for (int k = 0; k <B.n; k++)
{
r[i, j] += A[i, k] * B[k, j];
}
}
}
return r; 
}
public void PrintMatrix5()
{
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
Console.Write(matrix[i, j] + "\t");
}
Console.WriteLine();
}
}
public static MatrixKvadrat operator /(MatrixKvadrat A, double Ch)
{
MatrixKvadrat q = new MatrixKvadrat(A.n);
for (int i = 0; i < A.n; i++)
{
for (int j = 0; j < A.n; j++)
{
q[i, j] = A[i, j] +Ch;
}
}
return q;
}
public void PrintMatrix6()
{
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
{
Console.Write(matrix[i, j] + "\t");
}
Console.WriteLine();
}
}


}
}

